var app = require('express')();
/*
    var express = require('express');
    var app = express(); // express를 실행해서 app object 초기화.
    와 같다.

    require(module_name) : modules 폴더 내에 설치된 라이브러리를 불러오는 함수 .
    (라이브러리 : node.js에는 모듈이라고 한다.)
    
*/
    // Routing test
    app.get('/', function (req, res) {
        // http://localhost:82/ 
        res.send('<h1>안녕하세요 "/" 경로 입니다.</h1>');
    });

    app.get('/test', (req, res) => { res.send('test page') })
    app.get('/member', (req, res) => { res.send('member page') })
    app.get('/board', (req, res) => { res.send('board page') })

    var server = require('http').Server(app);

    server.listen(82, function () {
         console.log('listening on *:82');
    });// 82 port에 웹 서버 생성.

/*
    var http = require('http');
    var server = http.createServer();

    와 같다.

    웹 서버를 구동하기 위해 사용되는 기본 모듈.
    http모듈에는 각 종 요청과 연결을 처리하기 위한 server객체가 존재한다.
    이를 생성하기 위해서는 createServer()
    종료하기 위해서는 clse()함수가 필요.
    또한, 서버를 생성한 이후에는 접속하는 포트를 할당하기 위한, listen()함수 필요.
    
    ( Server 객체의 메서드 )
    - listen(port[, callback]) : 서버를 실행합니다.
    - close() : 서버를 종료합니다.

    ( Server 객체의 이벤트 )
    - request : 클라이언트가 요청할 때 발생하는 이벤트입니다.
    - connection : 클라이언트가 접속할 때 발생하는 이벤트입니다.
    - close : 서버가 종료될 때 발생하는 이벤트입니다.
    - checkContinue : 클라이언트가 지속적인 연결을 하고 있을 때 발생하는 이벤트입니다.
    - upgrade : 클라이언트가 HTTP 업그레이드를 요청할 때 발생하는 이벤트입니다.
    - clientError : 클라이언트에서 오류가 발생할 때 발생하는 이벤트입니다.
 */


var io = require('socket.io')(server);
var db = require('./connect.js');


const finding = 1;
const notFinding = 2;
const chating = 3;
 
var clients = []; 

var currentUser=[]; //현재 1:1접속 유저.

var check=false;

var currentRoom = ""; // 현재 room
var socketName = ""; // socket
var userid = ""; // 닉네임

io.sockets.on('connection', function(socket){
           socket.on('join room', function (data) {
               // 현재 아이디 가져오기
               console.log("<< join room >>");
               var is = true;
               var cur = -1;
                
               // 전에 room에 들어간 적이 있을 때, leave해주기 위함.
                for(var a = 0; a<currentUser.length;a++){
                    if(currentUser[a].socketName == socket.id){
                        //이미 존재.
                        console.log("<< Account already exists >>");
                        socket.leave(currentUser[a].currentRoom); //leave
                        cur=a;
                        is=false;
                        return;
                    }
                }
                
                // 처음 입장 : is:true
                if(is){
                    console.log("First admission");
                    currentUser.push({
                        socketName:socket.id,
                        userid:data.id,
                        currentRoom:data.chatKey
                    });

                    socketName=socket.id;
                    currentRoom=data.chatKey;
                    userid=data.id;
                    socket.join(data.chatKey);

                }else{
                    //처음입장이 아니라면,
                    currentUser[cur].currentRoom=data.chatKey; // currentRoom 내용 바꿔주기.
                    socket.join(data.chatKey);
                }

        });

        // 메세지를 보냈을 때!
         socket.on("message",function(result){
            console.log("send User : "+result.send);
            console.log("receive User : "+result.receive);
            console.log("send Message : "+result.data);
    

            db.doExecute("INSERT INTO ONECHAT_MESSAGE VALUES('"+result.chatKey+"','"+result.send+"','"+result.receive+"',SYSDATE,'"+result.data+"')");

            
            var onlineCheck = false; //상대방 온라인 여부
            for(var a = 0; a<currentUser.length; a++){
                if(currentUser[a].currentRoom == currentRoom){
                        if(currentUser[a].socketName != socketName){
                           onlineCheck = true;
                           break;
                        }
                }
            }
            console.log("온라인여부:"+onlineCheck);
            io.sockets.to(result.chatKey).emit("message", {content:result.data,sendName:result.send,onlineCheck:onlineCheck});
     });
        
    });



//connection이벤트는 클라이언트가 소켓서버에 접속할때 발생하는 이벤트
//콜백함수에 있는 socket이라는 변수는 접속한 클라이언트와 소켓서버가 실시간 양방향 통신을 할 수 있도록 하는 소켓객체

// 성공적으로 접속시,
// io.sockets.on("connection",function(socket){
//     socket.on("nickNameCheck",function(data){
//         if(!data.name){
//             socket.emit("nullError","닉네임을 입력해주세요");
//             return ;
//         }
 
//         for(var a = 0; a<clients.length;a++){
//             if(clients[a].name == data.name){
//                 socket.emit("sameNameError","동일한 닉네임이 존재합니다");
//                 return ;
//             }
//         }
 
//         clients.push({
//             name:data.name, //사용자의 닉네임
//             client:socket, //사용자의 소켓
//             roomName:"", //사용자가 들어가 있는 방 이름
//             status:notFinding //사용자의 상태. notFinding(대화상대를 찾고있지 않는)상태로 초기화 시킴.
//         });
        
//         socket.name = data.name;
//         socket.emit("nickNameCheckComplete");
//     })
 
//     socket.on("randomChatFindClick",function(data){
//         for(var a = 0; a<clients.length; a++){
//             if(clients[a].name == data.name){
//                 //해당사용자의 상태를 변경. 대화상대를 찾고있는(finding)상태로 변경
//                 clients[a].status = finding;
//                 socket.emit("randomChatFindClickComplete");
//                 return ;
//             }
//         }
//     });
 
//     socket.on("randomChatFining", function(data){ //대화방을 찾고 있는 상대와 같은 방으로 이동시킨다.
//         for(var a =0; a<clients.length; a++){
//             if(clients[a].status == finding){
//                 if(clients[a].name == data.name){
//                     continue;
//                 }else{
//                     var roomName = new Date().getTime()+"";
//                     clients[a].status = chating; //상대의 상태가 chating이 됨.
//                     clients[a].roomName = roomName; //상대가 들어가있는 방 이름이 roomName
//                     clients[a].client.join(roomName); //방으로 이동시킴
 
//                     for(var a = 0; a<clients.length; a++){
//                         if(clients[a].name == data.name){
//                             clients[a].status = chating;
//                             clients[a].roomName = roomName;
//                             clients[a].client.join(roomName); //방으로 이동시킴
//                             io.sockets.to(roomName).emit("randomChatFiningComplete",roomName);
//                             return ;
//                         }
//                     }
//                 }
//             }
//         }
//     });
 
//     socket.on("message",function(result){
//         io.sockets.to(result.roomName).emit("message", result.data);
//     });
 
//     socket.on("chatClosingBtn",function(data){
//         io.sockets.to(data.roomName).emit("chatEnd");
//     });
 
//     socket.on("ChatClosing",function(data){ //대화종료후 대화방에 들어가 있던 사용자들의 상태와,방이름을 리셋해줘야한다.
//         for(var a = 0; a<clients.length; a++){
//             if(clients[a].roomName == data.roomName){
//                 clients[a].client.join(clients[a].client.id);
//                 clients[a].roomName = "";
//                 clients[a].status = notFinding;
//             }
//         }
//     });
 
//     socket.on("clientsCount",function(){
//         io.sockets.emit("clientsCount",clients.length) //자신을포함한 모든 사용자에게 메세지 전달
//     }); //실시간으로 접속자의 수를 보여주기 위함.
    
//     socket.on("disconnect",function(){
//         for(var a = 0; a<clients.length;a++){
//             if(clients[a].name == socket.name){
//                 var aroom = clients[a].roomName;
//                 clients.splice(a,1);
//                 io.sockets.to(aroom).emit("discWhileChat");
//             }
//         }
//     });
// });

